// You are given a string s, partition it in such a way that every substring is a palindrome. Return all such palindromic partitions of s.
// Note: A palindrome string is a string that reads the same backward as forward.

// Example 1:
// Input: s = “aab”
// Output: [ ["a","a","b"], ["aa","b"] ]
// Explanation: The first  answer is generated by  making three partitions. The second answer is generated by making two partitions.

#include <bits/stdc++.h>

using namespace std;

class Solution{
public:
    vector<vector<string>> partition(string s){
        vector<vector<string>> res;
        vector<string> path;
        partitionHelper(0, s, path, res);
        return res;
    }

    void partitionHelper(int index, string s, vector<string> &path, vector<vector<string>> &res){
        if (index == s.size()){
            res.push_back(path);
            return;
        }
        for (int i = index; i < s.size(); ++i){
            if (isPalindrome(s, index, i)){
                path.push_back(s.substr(index, i - index + 1));
                partitionHelper(i + 1, s, path, res);
                path.pop_back();
            }
        }
    }

    bool isPalindrome(string s, int start, int end){
        while (start <= end){
            if (s[start++] != s[end--])
                return false;
        }
        return true;
    }
};
int main(){
    string s = "aabb";
    Solution obj;
    vector<vector<string>> ans = obj.partition(s);
    int n = ans.size();
    cout << "The Palindromic partitions are :-" << endl;
    cout << " [ ";
    for (auto i : ans){
        cout << "[ ";
        for (auto j : i)
        {
            cout << j << " ";
        }
        cout << "] ";
    }
    cout << "]";

    return 0;
}